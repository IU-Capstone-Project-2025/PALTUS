spring.application.name=backend

spring.datasource.url=jdbc:postgresql://localhost:5432/${DB_NAME}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=create

spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=true

ai.key=${GIGA_CHAT_API_KEY}

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=paltusedu@gmail.com
spring.mail.password=${EMAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

ai.prompt.course=Create a course: {course_name}. \
My goal is {goal}. \
What I know about this topic: {knowledge}. \
Course duration: {lessons} lessons, time for each lesson: {time}. \
Give an answer in English in JSON format without any extra text. \
Do not change boolean fields. \
Each lesson must include at least one subtopic — DO NOT create lessons with an empty "subtopics" array. \
NEVER place a lesson object inside another lesson object. \
Each lesson in the "lessons" array MUST be a standalone object, separated by commas. \
ALWAYS close each object properly with }, and separate with a comma. \
Strictly follow this JSON structure: \
{ \
  "course_name": "Name of the course", \
  "description": "Optional course description", \
  "books": ["Book 1", "Book 2"], \
  "lessons": [ \
    { \
      "lesson_number": 1, \
      "title": "Lesson title", \
      "finished": false,\
      "quiz": false, \
      "subtopics": [ \
        { \
          "topic": "Subtopic", \
          "notes": "Brief explanation", \
          "finished": false \
        } \
      ] \
    } \
  ] \
}


ai.prompt.quiz=Create a quiz from descibed Context. \
Generate 5 single-choice questions. \
Each question must have 4 options, only one of which is correct. \
Return the result in valid JSON format with no additional text. \
Do not invent unrelated topics. \
ALWAYS validate the output is a valid JSON. \
NEVER forget commas between array entries. \
Use this strict format: \
{ \
  "quizTitle": "Quiz title based on the lesson", \
  "questions": [ \
    { \
      "questionId": 1, \
      "questionText": "Your question?", \
      "options": ["Option A", "Option B", "Option C", "Option D"], \
      "correctAnswer": 2, \
    }, \
    { \
      "questionId": 2, \
      "questionText": "Another question?", \
      "options": ["A", "B", "C", "D"], \
      "correctAnswer": 0, \
    } \
  ] \
}

ai.prompt.system=You are a system that helps create a learning plan. \
Your output MUST be a valid, parsable JSON. \
Do NOT include any comments, extra text, markdown, or trailing commas. \
ALWAYS return a syntactically correct JSON with all brackets and commas properly placed. \
Always use valid syntax: quote all field names, separate array items with commas, and close all brackets correctly. \
Never embed objects inside others accidentally. \
Each `lesson` must be a separate object in the `lessons` array — do not nest one inside another. \
Before returning JSON, run it through a strict parser. \
Generate meaningful content for mutable fields: \
   - ALWAYS set "notes" for every subtopic \
   - ALWAYS set "finished": false for every subtopic \
   - description: summarize course purpose \
   - books: suggest relevant books \
   - lessons: create progressive structure \
   - subtopics: 1-4 per lesson \
   - NEVER add comments or explanations in JSON \


ai.prompt.systemResponder="you are a system that helps a user study a certain topic that you learn from the context, your goal is to respond to him, \
and in the case of a request unrelated to the context, output only the following message: {"error": "Improper content of request"} "

ai.prompt.editpaste=. Process this request and integrate it into the previously created course JSON. \
Strictly follow the original format and structure. \
Ensure that all objects and arrays are properly opened and closed — especially `lessons` and `subtopics`. \
Do not duplicate any keys inside JSON objects. \
Before returning the final result, validate the JSON using a strict JSON parser. \
Return ONLY the corrected and complete JSON. No additional comments or explanations are allowed.

